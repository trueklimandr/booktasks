/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package booktasks;

import booktasks.classes.Employee;
import booktasks.classes.SquareSequence;
import booktasks.interfaces.IntSequence;
import booktasks.interfaces.Measurable;
import com.google.common.base.Strings;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.exceptions.CsvValidationException;

import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class App {
    private final static Scanner in = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.print("Type exercise: ");
        String exercise = in.nextLine();
        switch (exercise) {
            case "2.13" -> ex213();
            case "3.1" -> ex31();
            case "3.2" -> ex32();
            case "3.3" -> ex33();
            case "3.4" -> ex34();
            case "3.5" -> ex35();
            default -> ex();
        }
    }

    private static void ex35() {
        System.out.print("Type number: ");
        int number = in.nextInt();

        SquareSequence seq = new SquareSequence();

        for (int i = 1; i <= number; i++) {
            System.out.print(seq.next().toString());
            if (i != number) System.out.print(", ");
        }
    }

    private static void ex34() {
        System.out.print("Type digit: ");
        int digit = in.nextInt();

        IntSequence constSeq = IntSequence.generate(() -> new IntSequence() {
            public boolean hasNext() {
                return true;
            }

            public int next() {
                return digit;
            }
        });

        for (int i = 1; i <= digit; i++) {
            System.out.println(i + ". " + constSeq.next());
        }
    }

    private static void ex33() {
        System.out.print("Type sequence: ");
        String s = in.nextLine();
        String[] sequence = s.split(" ");
        IntSequence intSequence = IntSequence.of(getIntSequenceFromStringSequence(sequence));

        System.out.print("Sequence: ");
        while (intSequence.hasNext()) {
            System.out.print(intSequence.next() + ", ");
        }
    }

    private static int[] getIntSequenceFromStringSequence(String[] sequence) {
        int[] ints = new int[sequence.length];
        for (int i = 0; i < sequence.length; i++) {
            ints[i] = Integer.parseInt(sequence[i]);
        }
        return ints;
    }

    private static void ex32() {
        Measurable[] employees = getEmployees();
        Employee largest = (Employee) Employee.largest(employees);
        System.out.println(largest.getName() + " (" + largest.getMeasure() + ")");
    }

    private static void ex31() {
        Measurable[] employees = getEmployees();
        System.out.println(Employee.average(employees));
    }

    private static Measurable[] getEmployees() {
        return new Employee[]{
            new Employee("Fedor", 40000.0),
            new Employee("Alexander", 45000.5),
            new Employee("Ivan", 32500.5)
        };
    }

    private static void ex213() {
        CSVReader reader;
        try {
            reader = new CSVReaderBuilder(new FileReader("/home/klimandr/workspace/Test.csv")).build();
        } catch (Exception ignored) {
            reader = null;
            System.out.println("There is no file");
        }
        if (reader != null) {
            processCSV(reader);
        }
    }

    private static void processCSV(CSVReader reader) {
        String [] nextLine;
        while (true) {
            try {
                if ((nextLine = reader.readNext()) == null) break;
            } catch (IOException | CsvValidationException e) {
                throw new RuntimeException(e);
            }
            System.out.println(
                nextLine[0] +
                Strings.repeat(" ", (int) (4 - nextLine[0].codePoints().count())) +
                "| " +
                nextLine[1] +
                Strings.repeat(" ", (int) (13 - nextLine[1].codePoints().count())) +
                "| " +
                nextLine[2]
            );
        }
    }

    private static void ex() {
        System.out.println("There is no such exercise number");
    }
}
